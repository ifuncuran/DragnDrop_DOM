{"version":3,"sources":["js/index.js"],"names":["box","document","querySelector","DnD","DnD__origin","dropBacklight","dropzoneColor","randomColor","Math","floor","random","toString","pointerDownDnD","event","shiftX","clientX","target","getBoundingClientRect","left","shiftY","clientY","top","parentElement","newBox","cloneNode","addEventListener","e","style","background","appendChild","moveAt","pageX","pageY","position","append","currentDroppable","onPointerMove","hidden","elemBelow","elementFromPoint","droppableBelow","closest","classList","contains","enterDroppable","elem","onpointerup","removeEventListener","parseInt","add","setTimeout","removeChild"],"mappings":";AAAA,IAAMA,EAAMC,SAASC,cAAc,mBAC7BC,EAAMF,SAASC,cAAc,QAC7BE,EAAcH,SAASC,cAAc,gBACrCG,EAAgB,OAChBC,EAAgB,UAEtB,SAASC,IACA,MAAA,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IAK7D,SAASC,EAAeC,GAElBC,IAAAA,EAASD,EAAME,QAAUF,EAAMG,OAAOC,wBAAwBC,KAC9DC,EAASN,EAAMO,QAAUP,EAAMG,OAAOC,wBAAwBI,IAG9DR,GAAAA,EAAMG,OAAOM,eAAiBlB,EAAa,CACzCmB,IAAAA,EAASV,EAAMG,OAAOQ,YAC1BD,EAAOE,iBAAiB,cAAe,SAACC,GAAMd,OAAAA,EAAec,KAC7DH,EAAOI,MAAMC,WAAarB,IAC1BH,EAAYyB,YAAYN,GAUjBO,SAAAA,EAAOC,EAAOC,GACrBnB,EAAMG,OAAOW,MAAMT,KAAOa,EAAQjB,EAAS,KAC3CD,EAAMG,OAAOW,MAAMN,IAAMW,EAAQb,EAAS,KAT5CN,EAAMG,OAAOW,MAAMM,SAAW,WAG9B9B,EAAI+B,OAAOrB,EAAMG,QAEjBc,EAAOjB,EAAMkB,MAAOlB,EAAMmB,OAOtBG,IAAAA,EAAmB,KAEdC,SAAAA,EAAcvB,GAErBiB,EAAOjB,EAAMkB,MAAOlB,EAAMmB,OAG1BnB,EAAMG,OAAOqB,QAAS,EAClBC,IAAAA,EAAYrC,SAASsC,iBAAiB1B,EAAME,QAASF,EAAMO,SAC/DP,EAAMG,OAAOqB,QAAS,EAGlBG,IAAAA,EAAiBF,EAAUG,QAAQ,cAInB,MAAlBD,GACAA,EAAeE,UAAUC,SAAS,0BACjCL,EAAUI,UAAUC,SAAS,0BAE9BH,EAAiB,MAGfL,GAAoBK,IAClBL,IAEaA,EAcZR,MAAMC,WAAatB,IAZxB6B,EAAmBK,IAOZI,SAAeC,GACtBA,EAAKlB,MAAMC,WAAavB,EALtBuC,CAAeT,IAcrBlC,SAASwB,iBAAiB,cAAeW,GAGzCvB,EAAMG,OAAO8B,YAAc,WACzB7C,SAAS8C,oBAAoB,cAAeX,GAC5CvB,EAAMG,OAAO8B,YAAc,KAEvBX,GACFA,EAAiBD,OAAOrB,EAAMG,QAE9BmB,EAAiBR,MAAMC,WAAatB,EAChC6B,EAAiBO,UAAUC,SAAS,yBAEtC9B,EAAMG,OAAOW,MAAMT,KAAO,OAC1BL,EAAMG,OAAOW,MAAMN,IAAM,QAChBc,EAAiBO,UAAUC,SAAS,sBAE7C9B,EAAMG,OAAOW,MAAMT,KACjB8B,SAASnC,EAAMG,OAAOW,MAAMT,MAC5BiB,EAAiBlB,wBAAwBC,KACzC,KACFL,EAAMG,OAAOW,MAAMN,IACjB2B,SAASnC,EAAMG,OAAOW,MAAMN,KAC5Bc,EAAiBlB,wBAAwBI,IACzC,QAIJR,EAAMG,OAAO0B,UAAUO,IAAI,8BAC3BC,WAAW,WAAM/C,OAAAA,EAAIgD,YAAYtC,EAAMG,SAAS,OArGtDhB,EAAIyB,iBAAiB,cAAe,SAACC,GAAMd,OAAAA,EAAec","file":"js.cdfb5274.js","sourceRoot":"..","sourcesContent":["const box = document.querySelector('.DnD__draggable');\nconst DnD = document.querySelector('.DnD');\nconst DnD__origin = document.querySelector('.DnD__origin');\nconst dropBacklight = 'pink';\nconst dropzoneColor = '#a6e0be';\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nbox.addEventListener('pointerdown', (e) => pointerDownDnD(e));\n\nfunction pointerDownDnD(event) {\n  // shift - чтобы при drag курсор находился над местом клика на квадрате.\n  let shiftX = event.clientX - event.target.getBoundingClientRect().left;\n  let shiftY = event.clientY - event.target.getBoundingClientRect().top;\n\n  // создаем новый бокс если прошлый был в ориджине (рандомим цвет и вешаем этот же обработчик действий):\n  if (event.target.parentElement == DnD__origin) {\n    let newBox = event.target.cloneNode();\n    newBox.addEventListener('pointerdown', (e) => pointerDownDnD(e));\n    newBox.style.background = randomColor();\n    DnD__origin.appendChild(newBox);\n  }\n\n  event.target.style.position = 'absolute';\n\n  //кладем перетаскиваемый элемент на верхний уровень DOM\n  DnD.append(event.target);\n\n  moveAt(event.pageX, event.pageY);\n\n  function moveAt(pageX, pageY) {\n    event.target.style.left = pageX - shiftX + 'px';\n    event.target.style.top = pageY - shiftY + 'px';\n  }\n\n  let currentDroppable = null;\n\n  function onPointerMove(event) {\n    //при движении курсором - передвигаем квадрат за курсором.\n    moveAt(event.pageX, event.pageY);\n\n    //получаем элемент под переносимым квадратом\n    event.target.hidden = true;\n    let elemBelow = document.elementFromPoint(event.clientX, event.clientY);\n    event.target.hidden = false;\n\n    //получаем ближайшего родителя элемента под переносимым квадратом с классом droppable (если есть)\n    let droppableBelow = elemBelow.closest('.droppable');\n\n    // хочу, чтобы в гриде нельзя было положить квадрат на уже лежащий квадрат:\n    if (\n      droppableBelow != null &&\n      droppableBelow.classList.contains('dropzone__grid-block') &&\n      !elemBelow.classList.contains('dropzone__grid-block')\n    ) {\n      droppableBelow = null;\n    }\n\n    if (currentDroppable != droppableBelow) {\n      if (currentDroppable) {\n        // вылетаем из droppable\n        leaveDroppable(currentDroppable);\n      }\n      currentDroppable = droppableBelow;\n      if (currentDroppable) {\n        // влетаем в droppable\n        enterDroppable(currentDroppable);\n      }\n    }\n    // подсветка элемента, в который можно вставить квадрат\n    function enterDroppable(elem) {\n      elem.style.background = dropBacklight;\n    }\n    // меняем background обратно\n    function leaveDroppable(elem) {\n      elem.style.background = dropzoneColor;\n    }\n  }\n\n  // листнер перемещения по экрану\n  document.addEventListener('pointermove', onPointerMove);\n\n  // кладем квадрат, удаляем более ненужные обработчики событий\n  event.target.onpointerup = function () {\n    document.removeEventListener('pointermove', onPointerMove);\n    event.target.onpointerup = null;\n\n    if (currentDroppable) {\n      currentDroppable.append(event.target);\n      //убираем подсветку droppable зоны\n      currentDroppable.style.background = dropzoneColor;\n      if (currentDroppable.classList.contains('dropzone__grid-block')) {\n        //кладем в зону с сеткой, делаем поправку на бордер\n        event.target.style.left = -1 + 'px';\n        event.target.style.top = -1 + 'px';\n      } else if (currentDroppable.classList.contains('dropzone__nogrid')) {\n        //кладем в зону без сетки, меняем позицию квадрата в соответстви с новым родителем\n        event.target.style.left =\n          parseInt(event.target.style.left) -\n          currentDroppable.getBoundingClientRect().left +\n          'px';\n        event.target.style.top =\n          parseInt(event.target.style.top) -\n          currentDroppable.getBoundingClientRect().top +\n          'px';\n      }\n    } else {\n      //произошло исчезновение\n      event.target.classList.add('DnD__draggable_disapearing');\n      setTimeout(() => DnD.removeChild(event.target), 1000);\n    }\n  };\n}\n"]}